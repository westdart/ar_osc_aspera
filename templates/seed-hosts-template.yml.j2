---
openshift_cluster_content:
- object: Projects
  content:
{% if 'parent' not in ar_osc_aspera_instance %}
  - name: {{ ar_osc_aspera_name }} Project
    template: "{{ _ar_osc_aspera_config_dest_templates }}/project-template.yml"
    action: create
    params_from_vars:
      NAMESPACE: "{{ ar_osc_aspera_ns }}"
      NAMESPACE_DISPLAY_NAME: "{{ ar_osc_aspera_ns | upper }}"
{% if ar_osc_aspera_node_selector %}
      NODE_SELECTOR: "{{ ar_osc_aspera_node_selector }}"
{% endif %}
    tags:
    - projects
    - aspera

{% endif %}

{% if ar_osc_aspera_instance.serviceaccounts is defined %}
{% set serviceaccounts = ar_osc_aspera_instance.serviceaccounts | merge_list_of_dicts({'namespace': ar_osc_aspera_ns}) %}
- object: Service Accounts for {{ deployment_phase | upper }}
  content:
{% for serviceaccount in ar_osc_aspera_instance.serviceaccounts %}
  - name: {{ serviceaccount.name }}-serviceaccount
    namespace: "{{ ar_osc_aspera_ns }}"
    template: "{{ _ar_osc_aspera_config_dest_templates }}/serviceaccount-template.yml"
    action: apply
    params_from_vars:
      SA_NAME: {{ serviceaccount.name }}
      SA_NAMESPACE: {{ ar_osc_aspera_ns }}
    tags:
    - projects
    - serviceaccounts
    - aspera
    - amqbroker
    - amqic
{% endfor %}
    post_steps:
      - role: ar_os_scc_binding
        vars:
          tmp_dep_dir: {{ playbook_dir}}/../roles/
          ar_os_scc_binding_items: {{ serviceaccounts | to_json }}
{% endif %}

- object: Deployments {{ deployment_phase | upper }}
  content:
# Application instances
{% if deploy_aspera is defined and deploy_aspera %}
# Aspera Config Map for {{ ar_osc_aspera_name }}
  - name: {{ ar_osc_aspera_instance | config_map_name }}
    namespace: "{{ ar_osc_aspera_ns }}"
    template: "{{ _ar_osc_aspera_config_dest_templates }}/aspera-seed-files-cm.yml"
    action: apply
    tags:
    - aspera

# Secrets {{ ar_osc_aspera_name }}
  - name: {{ ar_osc_aspera_instance | secrets_name }}
    namespace: "{{ ar_osc_aspera_ns }}"
    template: "{{ _ar_osc_aspera_config_dest_templates }}/aspera-secrets.yml"
    action: apply
    tags:
    - aspera

# Aspera instance for {{ ar_osc_aspera_name }}
  - name: "{{ ar_osc_aspera_instance | application_name }}"
    namespace: "{{ ar_osc_aspera_ns }}"
    template: "{{ _ar_osc_aspera_config_dest_templates }}/aspera-k8s-template.yml"
    action: apply
    params_from_vars:
      APPLICATION_NAME: "{{ ar_osc_aspera_instance | application_name }}"
      SEED_FILES_CM: "{{ ar_osc_aspera_instance | config_map_name }}"
      SEED_FILES_CONF_HASH: "{{ lookup('file', _ar_osc_aspera_config_dest_templates + '/aspera-seed-files-cm.yml') | hash('md5') }}"
      ASPERA_SECRETS: "{{ ar_osc_aspera_instance | secrets_name }}"
{% if aspera_image is defined or 'aspera_image' in ar_osc_aspera_instance %}
      IMAGE_NAME: {{ ar_osc_aspera_instance.aspera_image | default(aspera_image) }}
{% endif %}
{% if aspera_image_ns is defined or 'aspera_image_ns' in ar_osc_aspera_instance %}
      IMAGE_STREAM_NAMESPACE: {{ ar_osc_aspera_instance.aspera_image_ns | default(aspera_image_ns) }}
{% endif %}
      SSH_NODE_PORT: {{ ar_osc_aspera_instance.aspera_ssh_node_port | default('30022') }}
      FASP_NODE_PORT: {{ ar_osc_aspera_instance.aspera_fasp_node_port | default('30023') }}
    tags:
    - aspera

{% endif %}
